// server.js
import express from "express";
import cors from "cors";

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: "500kb" }));

const OPENAI_KEY = process.env.OPENAI_KEY || "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";  // ou configure via ENV

app.post("/analisar", async (req, res) => {
  const { texto } = req.body;

  const prompt = 
    "Voc√™ √© um especialista jur√≠dico em prote√ß√£o de dados e direitos do consumidor.\n\n" +
    "Sua tarefa √© analisar cl√°usulas de Termos de Uso e Pol√≠ticas de Privacidade, com o objetivo de avaliar riscos para o usu√°rio comum.\n\n" +
    "Atribua uma nota de risco de 0 a 10, onde:\n" +
    "- 0 = sem risco relevante\n" +
    "- 10 = m√∫ltiplas cl√°usulas gravemente prejudiciais\n\n" +
    "Use a seguinte l√≥gica:\n" +
    "Para cada ocorr√™ncia de cl√°usulas prejudiciais, aplique pontua√ß√£o negativa:\n" +
    "- Cl√°usula leve: +1 ponto\n" +
    "- Cl√°usula moderada: +2 pontos\n" +
    "- Cl√°usula grave: +3 pontos\n\n" +
    "Considere como cl√°usulas prejudiciais, por exemplo:\n" +
    "- Coleta ampla de dados sem finalidade clara\n" +
    "- Compartilhamento de dados com terceiros sem consentimento expl√≠cito\n" +
    "- Exclus√£o de responsabilidade da empresa em caso de danos\n" +
    "- Altera√ß√µes unilaterais sem notifica√ß√£o\n" +
    "- Venda de dados pessoais\n" +
    "- Imposi√ß√£o de arbitragem obrigat√≥ria sem alternativa\n" +
    "- Transfer√™ncia internacional de dados sem garantias\n" +
    "- Ren√∫ncia a direitos legais ou jur√≠dicos\n" +
    "- Monitoramento cont√≠nuo da atividade do usu√°rio\n\n" +
    "üî∑ RESPONDA **APENAS** EM JSON COM ESTA ESTRUTURA:\n" +
    "{\n" +
    '  "nota": <n√∫mero 0‚Äì10>,\n' +
    '  "risco": "sem risco"|"baixo"|"m√©dio"|"alto",\n' +
    '  "clausulasProblematicas": [ "cl√°usula 1", "cl√°usula 2", ‚Ä¶ ]\n' +
    "}";

  try {
    // fetch global do Node.js 18+ :contentReference[oaicite:1]{index=1}
    const apiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "",
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: texto }
        ],
        temperature: 0.5
      })
    });

    const text = await apiRes.text();
    if (!apiRes.ok) {
      console.error("[OPENAI] status", apiRes.status, "body", text);
      return res.status(apiRes.status).json({ error: "OpenAI API error", details: text });
    }

    // parse da resposta completa
    const data = JSON.parse(text);
    const choice = data.choices?.[0]?.message?.content;
    if (!choice) {
      console.error("[SERVER] sem content em choices:", data);
      return res.status(500).json({ error: "Sem content na resposta da IA", data });
    }

    // parse do JSON interno que o modelo devolveu
    let result;
    try {
      result = JSON.parse(choice);
    } catch (e) {
      console.error("[SERVER] falha ao parsear JSON interno:", e, choice);
      return res.status(500).json({ error: "JSON interno inv√°lido", raw: choice });
    }

    return res.json(result);
  } catch (err) {
    console.error("[ERRO] Falha na chamada √† OpenAI:", err);
    res.status(500).json({ error: "Erro ao analisar com IA.", details: err.toString() });
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ Servidor rodando em http://localhost:${PORT}`);
});
